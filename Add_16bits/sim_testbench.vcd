$date
  Mon Apr  8 18:28:28 2013
$end
$version
  GHDL v0
$end
$timescale
  1 fs
$end
$var reg 16 ! sinput0[15:0] $end
$var reg 16 " sinput1[15:0] $end
$var reg 1 # scarin $end
$var reg 16 $ soutput[15:0] $end
$var reg 1 % scarout $end
$scope module dut $end
$var reg 16 & input0[15:0] $end
$var reg 16 ' input1[15:0] $end
$var reg 1 ( carin $end
$var reg 16 ) output[15:0] $end
$var reg 1 * carout $end
$var reg 17 + sig[16:0] $end
$scope module adder1 $end
$var reg 1 , a $end
$var reg 1 - b $end
$var reg 1 . cin $end
$var reg 1 / s $end
$var reg 1 0 cy $end
$var reg 1 1 i1 $end
$var reg 1 2 i2 $end
$var reg 1 3 i3 $end
$upscope $end
$scope module bouclegenerate(1) $end
$scope module adders $end
$var reg 1 4 a $end
$var reg 1 5 b $end
$var reg 1 6 cin $end
$var reg 1 7 s $end
$var reg 1 8 cy $end
$var reg 1 9 i1 $end
$var reg 1 : i2 $end
$var reg 1 ; i3 $end
$upscope $end
$upscope $end
$scope module bouclegenerate(2) $end
$scope module adders $end
$var reg 1 < a $end
$var reg 1 = b $end
$var reg 1 > cin $end
$var reg 1 ? s $end
$var reg 1 @ cy $end
$var reg 1 A i1 $end
$var reg 1 B i2 $end
$var reg 1 C i3 $end
$upscope $end
$upscope $end
$scope module bouclegenerate(3) $end
$scope module adders $end
$var reg 1 D a $end
$var reg 1 E b $end
$var reg 1 F cin $end
$var reg 1 G s $end
$var reg 1 H cy $end
$var reg 1 I i1 $end
$var reg 1 J i2 $end
$var reg 1 K i3 $end
$upscope $end
$upscope $end
$scope module bouclegenerate(4) $end
$scope module adders $end
$var reg 1 L a $end
$var reg 1 M b $end
$var reg 1 N cin $end
$var reg 1 O s $end
$var reg 1 P cy $end
$var reg 1 Q i1 $end
$var reg 1 R i2 $end
$var reg 1 S i3 $end
$upscope $end
$upscope $end
$scope module bouclegenerate(5) $end
$scope module adders $end
$var reg 1 T a $end
$var reg 1 U b $end
$var reg 1 V cin $end
$var reg 1 W s $end
$var reg 1 X cy $end
$var reg 1 Y i1 $end
$var reg 1 Z i2 $end
$var reg 1 [ i3 $end
$upscope $end
$upscope $end
$scope module bouclegenerate(6) $end
$scope module adders $end
$var reg 1 \ a $end
$var reg 1 ] b $end
$var reg 1 ^ cin $end
$var reg 1 _ s $end
$var reg 1 ` cy $end
$var reg 1 a i1 $end
$var reg 1 b i2 $end
$var reg 1 c i3 $end
$upscope $end
$upscope $end
$scope module bouclegenerate(7) $end
$scope module adders $end
$var reg 1 d a $end
$var reg 1 e b $end
$var reg 1 f cin $end
$var reg 1 g s $end
$var reg 1 h cy $end
$var reg 1 i i1 $end
$var reg 1 j i2 $end
$var reg 1 k i3 $end
$upscope $end
$upscope $end
$scope module bouclegenerate(8) $end
$scope module adders $end
$var reg 1 l a $end
$var reg 1 m b $end
$var reg 1 n cin $end
$var reg 1 o s $end
$var reg 1 p cy $end
$var reg 1 q i1 $end
$var reg 1 r i2 $end
$var reg 1 s i3 $end
$upscope $end
$upscope $end
$scope module bouclegenerate(9) $end
$scope module adders $end
$var reg 1 t a $end
$var reg 1 u b $end
$var reg 1 v cin $end
$var reg 1 w s $end
$var reg 1 x cy $end
$var reg 1 y i1 $end
$var reg 1 z i2 $end
$var reg 1 { i3 $end
$upscope $end
$upscope $end
$scope module bouclegenerate(10) $end
$scope module adders $end
$var reg 1 | a $end
$var reg 1 } b $end
$var reg 1 !" cin $end
$var reg 1 "" s $end
$var reg 1 #" cy $end
$var reg 1 $" i1 $end
$var reg 1 %" i2 $end
$var reg 1 &" i3 $end
$upscope $end
$upscope $end
$scope module bouclegenerate(11) $end
$scope module adders $end
$var reg 1 '" a $end
$var reg 1 (" b $end
$var reg 1 )" cin $end
$var reg 1 *" s $end
$var reg 1 +" cy $end
$var reg 1 ," i1 $end
$var reg 1 -" i2 $end
$var reg 1 ." i3 $end
$upscope $end
$upscope $end
$scope module bouclegenerate(12) $end
$scope module adders $end
$var reg 1 /" a $end
$var reg 1 0" b $end
$var reg 1 1" cin $end
$var reg 1 2" s $end
$var reg 1 3" cy $end
$var reg 1 4" i1 $end
$var reg 1 5" i2 $end
$var reg 1 6" i3 $end
$upscope $end
$upscope $end
$scope module bouclegenerate(13) $end
$scope module adders $end
$var reg 1 7" a $end
$var reg 1 8" b $end
$var reg 1 9" cin $end
$var reg 1 :" s $end
$var reg 1 ;" cy $end
$var reg 1 <" i1 $end
$var reg 1 =" i2 $end
$var reg 1 >" i3 $end
$upscope $end
$upscope $end
$scope module bouclegenerate(14) $end
$scope module adders $end
$var reg 1 ?" a $end
$var reg 1 @" b $end
$var reg 1 A" cin $end
$var reg 1 B" s $end
$var reg 1 C" cy $end
$var reg 1 D" i1 $end
$var reg 1 E" i2 $end
$var reg 1 F" i3 $end
$upscope $end
$upscope $end
$scope module bouclegenerate(15) $end
$scope module adders $end
$var reg 1 G" a $end
$var reg 1 H" b $end
$var reg 1 I" cin $end
$var reg 1 J" s $end
$var reg 1 K" cy $end
$var reg 1 L" i1 $end
$var reg 1 M" i2 $end
$var reg 1 N" i3 $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
b0000000000000001 !
b0000000000000000 "
0#
b0000000000000001 $
0%
b0000000000000001 &
b0000000000000000 '
0(
b0000000000000001 )
0*
b00000000000000000 +
1,
0-
0.
1/
00
11
02
03
04
05
06
07
08
09
0:
0;
0<
0=
0>
0?
0@
0A
0B
0C
0D
0E
0F
0G
0H
0I
0J
0K
0L
0M
0N
0O
0P
0Q
0R
0S
0T
0U
0V
0W
0X
0Y
0Z
0[
0\
0]
0^
0_
0`
0a
0b
0c
0d
0e
0f
0g
0h
0i
0j
0k
0l
0m
0n
0o
0p
0q
0r
0s
0t
0u
0v
0w
0x
0y
0z
0{
0|
0}
0!"
0""
0#"
0$"
0%"
0&"
0'"
0("
0)"
0*"
0+"
0,"
0-"
0."
0/"
00"
01"
02"
03"
04"
05"
06"
07"
08"
09"
0:"
0;"
0<"
0="
0>"
0?"
0@"
0A"
0B"
0C"
0D"
0E"
0F"
0G"
0H"
0I"
0J"
0K"
0L"
0M"
0N"
#50000000
1#
b0000000000000010 $
1(
b0000000000000010 )
b00000000000000010 +
1.
0/
10
13
16
17
#100000000
b1111111111111111 !
b0000000000000000 $
1%
b1111111111111111 &
b0000000000000000 )
1*
b11111111111111110 +
14
07
18
19
1;
1<
1>
0?
1@
1A
1C
1D
1F
0G
1H
1I
1K
1L
1N
0O
1P
1Q
1S
1T
1V
0W
1X
1Y
1[
1\
1^
0_
1`
1a
1c
1d
1f
0g
1h
1i
1k
1l
1n
0o
1p
1q
1s
1t
1v
0w
1x
1y
1{
1|
1!"
0""
1#"
1$"
1&"
1'"
1)"
0*"
1+"
1,"
1."
1/"
11"
02"
13"
14"
16"
17"
19"
0:"
1;"
1<"
1>"
1?"
1A"
0B"
1C"
1D"
1F"
1G"
1I"
0J"
1K"
1L"
1N"
#150000000
